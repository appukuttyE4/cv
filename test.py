# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zNEf0h_AXvZoQTVIHlQ5WfKtQLeLwi-F
"""

import cv2
import matplotlib.pyplot as plt

#Negative image 
imgpath = 'car.jpg'
img = cv2.imread(imgpath)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)#by default cv2 reads images in BGR so converting to RGB
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #converting to grayscale
#gray = cv2.imread(imgpath, 0) 
colored_negative = abs(255-img)
gray_negative = abs(255-gray)
plt.imshow(gray_negative)

from PIL import Image, ImageOps

im = Image.open('car.jpg')
im_invert = ImageOps.invert(im)
im_invert.save('car_invert.jpg', quality=95)

print(img.shape)

#Thresholding

from PIL import Image, ImageOps
# creating a image1 object
im1 = Image.open("car.jpg")
# applying grayscale method
im2 = ImageOps.grayscale(im1)

def binarize(img):

  #initialize threshold
  thresh=200

  #convert image to greyscale
  #img=img.convert('L') 

  width,height=img.size

  #traverse through pixels 
  for x in range(width):
    for y in range(height):

      #if intensity less than threshold, assign white
      if img.getpixel((x,y)) < thresh:
        img.putpixel((x,y),0)

      #if intensity greater than threshold, assign black 
      else:
        img.putpixel((x,y),255)

  return img

bin_image=binarize(im2)
bin_image.save('car_bin.jpg', quality=95)

"""Rotation, Translation"""

#Translate
img = Image.open("car.jpg")
img = img.transform(img.size, Image.AFFINE, (1, 0, 1, 1, 0, 1))
img.save('car_translate.png')

#Rotate
img = Image.open("car.jpg")
img = img.rotate(90)
img.save('car_rotate.png')

#Resize
img = Image.open("car.jpg")
new_img = img.resize((300,300))
new_img.save('car_resize.png')
print(new_img.size)

"""Colorspace transform"""

#Colorspace transform

img = cv2.imread("car.jpg")
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(img)

#CMAP= "VIRIDIS"
cmap_img1 = img[:, :, 0]
#CMAP= "VIRIDIS"
cmap_img2 = img[:, :, 0]
#CMAP= "YlOrBr"
cmap_img3 = img[:, :, 0]
#CMAP= "PuBuGn"
cmap_img4 = img[:, :, 0]

f, axarr = plt.subplots(2,2)
f.set_figwidth(10)
f.set_figheight(6)
X=axarr[0,0].imshow(cmap_img1, cmap="hot", aspect= 1.5)
plt.colorbar(X, ax=axarr[0, 0])
X=axarr[0,1].imshow(cmap_img2, cmap="viridis" , aspect=1.5)
plt.colorbar(X, ax=axarr[0, 1])
X=axarr[1,0].imshow(cmap_img3, cmap="RdPu", aspect=1.5)
plt.colorbar(X, ax=axarr[1, 0])
X=axarr[1,1].imshow(cmap_img4, cmap="PuBuGn", aspect=1.5)
plt.colorbar(X, ax=axarr[1, 1])
axarr[0, 0].set_title("Hot")
axarr[0, 1].set_title("viridis")
axarr[1, 0].set_title("RdPu")
axarr[1, 1].set_title("PuBuGn")
f.tight_layout()

#Changing the higher and lower order bit values 
f, axarr2 = plt.subplots(2,2)
f.set_figwidth(10)
f.set_figheight(7)
img1 = img & 0b11110000
axarr2[0,0].imshow(img1)
img2 = img & 0b11000011
axarr2[0,1].imshow(img2)
img3 = img & 0b10000001
axarr2[1,0].imshow(img3)
img4 = img & 0b00111100
axarr2[1,1].imshow(img4)

axarr2[0, 0].set_title("4 Higher order bits to 1")
axarr2[0, 1].set_title("2 Higher order bits and lower order bits to 1")
axarr2[1, 0].set_title("1 Higher order bits and lower order bit to 1")
axarr2[1, 1].set_title("2 Higher order bits and lower order bits to 0")
f.tight_layout()

"""Annotations"""

#Annotations

import cv2
from google.colab.patches import cv2_imshow
	
# Read the image
img = cv2.imread('car.jpg')
#Display the input image
cv2_imshow(img)
cv2.waitKey(0)
print('\n\n')


# Line over image
line_img = img.copy()
pointA = (40,80)
pointB = (130,80)
cv2.line(line_img, pointA, pointB, (0,0,0), thickness=3)
cv2_imshow(line_img)
cv2.waitKey(0)
print('\n\n')


# Circle over image

circle_img = img.copy()
circle_center = (100,40)
radius =10
cv2.circle(circle_img, circle_center, radius, (0, 0, 255), thickness=3) 
cv2_imshow(circle_img)
cv2.waitKey(0)
print('\n\n')


# Filled circle over image

filledcircle_img = img.copy()
circle_center = (100,40)
radius =10
cv2.circle(filledcircle_img, circle_center, radius, (0, 0, 255), thickness=-1)

# display the output image 
cv2_imshow(filledcircle_img)
cv2.waitKey(0)
print('\n\n')

# Rectangle over image 
rect_img = img.copy()
start_point =(30,60)
end_point =(300,38)
cv2.rectangle(rect_img, start_point, end_point, (0, 0, 255), thickness= 3) 
cv2_imshow(rect_img)
cv2.waitKey(0)
print('\n\n')

# Add text
txt_img = img.copy()
text = 'Im sad '
org = (5,35)
cv2.putText(txt_img, text, org, fontFace = cv2.FONT_HERSHEY_COMPLEX, fontScale = 4.0, color = (0,0,0))
cv2_imshow(txt_img)
cv2.waitKey(0)
cv2.destroyAllWindows()

#Canny edge detection 


import cv2
  
img = cv2.imread("car.jpg")  # Read image
  
# Setting parameter values
t_lower = 50  # Lower Threshold
t_upper = 150  # Upper threshold
  
# Applying the Canny Edge filter
edge = cv2.Canny(img, t_lower, t_upper)
  
cv2_imshow(img)
cv2_imshow(edge)